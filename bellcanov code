import tkinter as tk
from tkinter import scrolledtext, filedialog, messagebox
import subprocess

class BellcanovCode:
    def __init__(self, root):
        self.root = root
        self.root.title("Bellcanov Code")

        self.create_widgets()

    def create_widgets(self):
        # Branding with user's name
        self.branding = tk.Label(self.root, text="Bellcanov Code by Akira", fg="red", font=("Helvetica", 16))
        self.branding.pack()

        # Create a text area for the code
        self.text_area = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, undo=True)
        self.text_area.pack(expand=True, fill='both')

        # Create a frame for buttons
        button_frame = tk.Frame(self.root)
        button_frame.pack(side=tk.BOTTOM, fill='x')

        # Create a button to run the code
        self.run_button = tk.Button(button_frame, text="Run Code", command=self.run_code)
        self.run_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Create a button to debug the code
        self.debug_button = tk.Button(button_frame, text="Debug Code", command=self.debug_code)
        self.debug_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Create a button to open a file
        self.open_button = tk.Button(button_frame, text="Open File", command=self.open_file)
        self.open_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Create a button to save a file
        self.save_button = tk.Button(button_frame, text="Save File", command=self.save_file)
        self.save_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Create a button to change to light theme
        self.light_theme_button = tk.Button(button_frame, text="Light Theme", command=lambda: self.change_theme("light"))
        self.light_theme_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Create a button to change to dark theme
        self.dark_theme_button = tk.Button(button_frame, text="Dark Theme", command=lambda: self.change_theme("dark"))
        self.dark_theme_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Create a text area for the output
        self.output_area = scrolledtext.ScrolledText(self.root, height=10, wrap=tk.WORD, state='disabled')
        self.output_area.pack(side=tk.BOTTOM, fill='x')

    def open_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Python files", "*.py"), ("All files", "*.*")])
        if file_path:
            with open(file_path, 'r') as file:
                content = file.read()
                self.text_area.delete('1.0', tk.END)
                self.text_area.insert('1.0', content)

    def save_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".py", filetypes=[("Python files", "*.py"), ("All files", "*.*")])
        if file_path:
            with open(file_path, 'w') as file:
                content = self.text_area.get('1.0', tk.END)
                file.write(content)
            messagebox.showinfo("Save File", "File saved successfully")

    def change_theme(self, theme):
        if theme == "light":
            self.text_area.config(bg="white", fg="black")
            self.output_area.config(bg="white", fg="black")
        elif theme == "dark":
            self.text_area.config(bg="black", fg="white")
            self.output_area.config(bg="black", fg="white")

    def run_code(self):
        code = self.text_area.get('1.0', tk.END)
        result = self.execute_code(code)
        self.display_output(result)

    def debug_code(self):
        # Placeholder for debugging functionality
        code = self.text_area.get('1.0', tk.END)
        result = self.execute_code(code)
        self.display_output(result)

    def execute_code(self, code):
        try:
            result = subprocess.run(['python3', '-c', code], capture_output=True, text=True, check=True)
            return {'output': result.stdout, 'error': result.stderr}
        except subprocess.CalledProcessError as e:
            return {'output': e.stdout, 'error': e.stderr}

    def display_output(self, result):
        self.output_area.config(state='normal')
        self.output_area.delete('1.0', tk.END)
        self.output_area.insert(tk.END, result['output'] + result['error'])
        self.output_area.config(state='disabled')

if __name__ == "__main__":
    root = tk.Tk()
    app = BellcanovCode(root)
    root.mainloop()
